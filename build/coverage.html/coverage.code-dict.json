{"/home/travis/build/npmtest/node-npmtest-googlemaps/test.js":"/* istanbul instrument in package npmtest_googlemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googlemaps/lib.npmtest_googlemaps.js":"/* istanbul instrument in package npmtest_googlemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_googlemaps = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_googlemaps = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-googlemaps/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-googlemaps && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_googlemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_googlemaps\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_googlemaps.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_googlemaps.rollup.js'] =\n            local.assetsDict['/assets.npmtest_googlemaps.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_googlemaps.__dirname + '/lib.npmtest_googlemaps.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/index.js":"/**\n * Modules from the community: package.json\n */\nvar defaultRequest = require('request');\nvar waitress       = require('waitress');\nvar check          = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest      = require('./utils/makeRequest');\nvar _assignParams     = require('./utils/assignParams');\nvar _jsonParser       = require('./utils/jsonParser');\nvar _encodePolyline   = require('./utils/encodePolylines');\nvar _getDefaultConfig = require('./config/getDefault');\nvar _constants        = require('./config/constants');\n\n\nvar ACCEPTED_CONFIG_KEYS = _constants.ACCEPTED_CONFIG_KEYS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar api = {\n  placeSearchText:        require('./placeSearchText'),\n  placeSearch:            require('./placeSearchNearby'),\n  placeDetails:           require('./placeDetails'),\n  placeAutocomplete:      require('./placeAutocomplete'),\n  geocode:                require('./geocode'),\n  reverseGeocode:         require('./reverseGeocode'),\n  distance:               require('./distance'),\n  directions:             require('./directions'),\n  elevationFromLocations: require('./elevationFromLocations'),\n  // TODO\n  // move this into an internal module + fix integration test\n  // elevationFromPath:      require('./elevationFromPath'),\n  staticMap:              require('./staticMap'),\n  streetView:             require('./streetView'),\n  timezone:               require('./timezone')\n}\n\n\n\n/**\n * Constructor\n */\nvar GoogleMapsAPI = function(config, request) {\n\n  var pk = null;\n\n  if (!check.object(config)) {\n    config = {};\n  }\n\n  var clonedConfig = JSON.parse(JSON.stringify(config));\n\n  if (clonedConfig['google_private_key'] != null) {\n    pk = clonedConfig['google_private_key'];\n    delete clonedConfig['google_private_key'];\n  }\n\n  /**\n   * Calling _getDefaultConfig() inside the constructor ensure the config is not a singleton\n   */\n  this.config = _assignParams(_getDefaultConfig(), clonedConfig, ACCEPTED_CONFIG_KEYS);\n\n  if (pk != null) {\n    this.config['google_private_key'] = pk;\n  }\n\n  if (typeof request !== 'function') {\n    request = defaultRequest;\n  }\n\n  this.request = request;\n\n};\n\n/**\n * Endpoint: /maps/api/place/nearbysearch/json\n * Google documentation reference: https://developers.google.com/places/documentation/search\n *\n * TODO: Maps API for Work customers should not include a client or signature parameter with their requests.\n * TODO: params zagatselected\n */\nGoogleMapsAPI.prototype.placeSearch = api.placeSearch\n\n/**\n * Endpoint: /maps/api/place/textsearch/json\n * Google documentation reference: https://developers.google.com/places/documentation/search\n *\n * TODO: Maps API for Work customers should not include a client or signature parameter with their requests.\n * TODO: params zagatselected\n */\nGoogleMapsAPI.prototype.placeSearchText = api.placeSearchText\n\n/**\n *\n * Endpoint: '/maps/api/place/details/json'\n * Google documentation reference: https://developers.google.com/places/documentation/details\n *\n * Note: reference is deprecated. The reference advises to use placeId instead\n * Note: sensor is no longer required\n */\nGoogleMapsAPI.prototype.placeDetails = api.placeDetails\n\n/**\n *\n * Endpoint: '/maps/api/place/autocomplete/json'\n * Google documentation reference: https://developers.google.com/places/web-service/autocomplete\n */\nGoogleMapsAPI.prototype.placeAutocomplete = api.placeAutocomplete\n\n/**\n * Server side geocoding. For client usage please refer to this URL:\n * https://developers.google.com/maps/articles/geocodestrat#client\n *\n * Endpoint: '/maps/api/geocode/json'\n * Google documentation reference: https://developers.google.com/maps/documentation/geocoding\n *\n * Use limitations: This service is generally designed for geocoding static (known in advance) addresses for placement of application content on a map; this service is not designed to respond in real time to user input, for example. For dynamic geocoding (for example, within a user interface element)\n *\n * Caching: Geocoding is a time and resource intensive task. Whenever possible, pre-geocode known addresses (using the Geocoding API described here or another geocoding service), and store your results in a temporary cache of your own design.\n\n * Quotas: Users of the free API: 2,500 requests per 24 hour period. 5 requests per second.\n           Google Maps API for Work customers: 100,000 requests per 24 hour period. 10 requests per second.\n */\nGoogleMapsAPI.prototype.geocode = api.geocode\n\n/**\n *\n * Endpoint: '/maps/api/geocode/json'\n * Google documentation reference: https://developers.google.com/maps/documentation/geocoding/#ReverseGeocoding\n */\nGoogleMapsAPI.prototype.reverseGeocode = api.reverseGeocode\n\n/**\n *\n * Endpoint: '/maps/api/distancematrix/json'\n * Google documentation reference: https://developers.google.com/maps/documentation/distancematrix/\n *\n * Use limitations: Distance Matrix API URLs are restricted to approximately 2000 characters, after URL Encoding. As some Distance Matrix API service URLs may involve many locations, be aware of this limit when constructing your URLs. Note that different browsers, proxies, and servers may have different URL character limits as well.\n *\n * Quotas: Users of the free API: 100 elements per query. 100 elements per 10 seconds. 2 500 elements per 24 hour period.\n           Google Maps API for Work customers: 625 elements per query. 1 000 elements per 10 seconds. 100 000 elements per 24 hour period.\n */\nGoogleMapsAPI.prototype.distance = api.distance\n\n/**\n * departureTime and arrivalTime must be passed as UNIX timestamp => Math.floor((new Date()).getTime()/1000)\n *\n * Endpoint: '/maps/api/directions/json'\n * Google documentation reference: https://developers.google.com/maps/documentation/directions/\n * note: This service is generally designed for calculating directions for static (known in advance) addresses for placement of application content on a map; this service is not designed to respond in real time to user input, for example. For dynamic directions calculations (for example, within a user interface element), consult the documentation for the JavaScript API V3 Directions Service.\n *\n * Quotas: Users of the free API: 2,500 directions requests per 24 hour period. Up to 8 waypoints allowed in each request. Waypoints are not available for transit directions. 2 requests per second.\n           Google Maps API for Work customers: 100,000 directions requests per 24 hour period. 23 waypoints allowed in each request. Waypoints are not available for transit directions. 10 requests per second.\n */\nGoogleMapsAPI.prototype.directions = api.directions\n\n/**\n *\n * Endpoint: '/maps/api/elevation/json'\n * Google documentation reference: http://code.google.com/apis/maps/documentation/elevation/\n *\n * Quotas: Users of the free API: 2,500 directions requests per 24 hour period. 512 locations per request. 5 requests per second.\n           Google Maps API for Work customers: 100,000 directions requests per 24 hour period. 512 locations per request. 10 requests per second.\n */\nGoogleMapsAPI.prototype.elevationFromLocations = api.elevationFromLocations\n\n/**\n *\n * Endpoint: '/maps/api/elevation/json'\n * Google documentation reference: http://code.google.com/apis/maps/documentation/elevation/#Paths\n */\nGoogleMapsAPI.prototype.elevationFromPath = function(params, callback) {\n\n  return _elevationFromPath(this.request, this.config, params.path, params.samples, callback);\n\n};\n\n\n/**\n * V2\n * Endpoint: '/maps/api/staticmap'\n * Google documentation reference: https://developers.google.com/maps/documentation/staticmaps/\n */\nGoogleMapsAPI.prototype.staticMap = api.staticMap\n\n/**\n *\n * Endpoint: '/maps/api/streetview'\n * Google documentation reference: http://code.google.com/apis/maps/documentation/streetview\n */\nGoogleMapsAPI.prototype.streetView = api.streetView\n\n/**\n *\n * Endpoint: '/maps/api/timezone'\n * Google documentation reference: http://code.google.com/apis/maps/documentation/timezone\n */\nGoogleMapsAPI.prototype.timezone = api.timezone\n\n\n/**\n * TODO this doesn't belong here\n * Helper function to check and convert an array of points, be it strings/numbers/etc\n * into the format used by Google Maps for representing lists of latitude/longitude pairs.\n *\n * This is call recursively\n */\nGoogleMapsAPI.prototype.checkAndConvertArrayOfPoints = checkAndConvertPoint = function(input) {\n  if ('string' === typeof input) {\n    return input;\n  }\n\n  if (Array.isArray(input)) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      output.push(checkAndConvertPoint(input[i]));\n    }\n    return output.join('|');\n  }\n\n  throw new Error('Unrecognized input: checkAndConvertArrayOfPoints accepts Arrays and Strings');\n};\n\n\n/**\n * TODO this doesn't belong here\n * Helper function to check and convert an points, be it strings/arrays of numbers/etc\n * into the format used by Google Maps for representing latitude/longitude pairs\n */\nGoogleMapsAPI.prototype.checkAndConvertPoint = function(input) {\n  if ('string' === typeof input) {\n    return input;\n  }\n\n  if (Array.isArray(input)) {\n    return input[0].toString() + ',' + input[1].toString();\n  }\n\n  throw new Error('Unrecognized input: checkAndConvertPoint accepts Arrays of Numbers and Strings');\n};\n\n\nmodule.exports = GoogleMapsAPI;\n\n// TODO improve this and move to a separate file\nvar _elevationFromPath = function(request, config, path, samples, callback, sensor) {\n\n  var MAX_PATH_LENGTH = 1500;\n\n  if (config.encode_polylines === true) {\n    path = 'enc:' + _encodePolyline(path);\n  }\n\n  var args = {\n    'path':    path,\n    'samples': samples,\n    'sensor': sensor || 'false'\n  };\n\n  var count = (path.length < MAX_PATH_LENGTH ? 1 : Math.ceil(path.length/MAX_PATH_LENGTH));\n\n\n  if (count === 1) {\n\n    _makeRequest(request, config, GOOGLEMAPS_ENDPOINTS['elevation'], args, _jsonParser(callback), MAX_REQUEST_LENGTHS['elevation']);\n\n  } else {\n\n    var done = waitress(count, function(err, results) {\n\n      if (err) {\n        if (typeof callback === 'function') {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n\n      results = results\n        .sort(function(a, b) { return a.n - b.n; })\n        .map(function(v) { return v.results; });\n\n      var status = 'OK';\n      var aggregated = [];\n      results.forEach(function(result) {\n        aggregated = aggregated.concat(result.results);\n        if (result.status !== 'OK') {\n          status = result.status;\n        }\n      });\n      results = {\n        results: aggregated,\n        status: status\n      };\n      return callback(null, results);\n    });\n\n    path = path.split('|');\n    var pieceSize = Math.ceil(path.length / count);\n    var n = 0;\n\n    while (path.length) {\n      var smallerPath = path.splice(0, pieceSize);\n\n      // google will throttle us if we launch all the requests together, so we have to stagger them.\n      (function(n, path) {\n\n        var samples = path.length;\n\n        path = path.join('|');\n        var cb = function(err, results) {\n          if (err) {\n            return done(err);\n          }\n\n          return done(null, { n: n, results: results });\n        };\n\n        setTimeout(function() {\n          _elevationFromPath(request, config, path, samples, cb, sensor);\n        }, Math.floor(Math.random() * config.stagger_time));\n\n      })(++n, smallerPath);\n    }\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/makeRequest.js":"/**\n * Node.js native modules\n */\nvar qs     = require('qs');\nvar crypto = require('crypto');\n\nfunction _buildUrl(config, args, path) {\n\n  var qsConfig = { indices: false, arrayFormat: 'repeat' };\n\n  if (config.google_client_id && config.google_private_key) {\n    args.client = config.google_client_id;\n\n    // TODO\n    // is this the best way to clean the query string?\n    // why does request break the signature with ' character if the signature is generated before request?\n    // signature = signature.replace(/\\+/g,'-').replace(/\\//g,'_');\n    var query = qs.stringify(args, qsConfig).split('');\n    for (var i = 0; i < query.length; ++i) {\n      // request will escape these which breaks the signature\n      if (query[i] === \"'\") query[i] = escape(query[i]);\n    }\n    query = query.join('');\n\n    path = path + \"?\" + query;\n\n    if (config.google_channel) {\n      path += \"&channel=\" + config.google_channel;\n    }\n\n    // Create signer object passing in the key, telling it the key is in base64 format\n    var signer = crypto.createHmac('sha1', config.google_private_key);\n\n    // Get the signature, telling it to return the signature in base64 format\n    var signature = signer.update(path).digest('base64');\n    signature = signature.replace(/\\+/g,'-').replace(/\\//g,'_');\n    path += \"&signature=\" + signature;\n    return path;\n  } else {\n    return path + \"?\" + qs.stringify(args, qsConfig);\n  }\n\n}\n\n\n/**\n * Makes the request to Google Maps API.\n */\nmodule.exports = function(request, config, path, args, callback, requestMaxLength, encoding) {\n  requestMaxLength = requestMaxLength || -1;\n\n  var secure = config.secure;\n\n  if (config.key != null) {\n    // google requires https when including an apiKey\n    secure = true;\n    args.key = config.key;\n  }\n\n  path = _buildUrl(config, args, path);\n\n  if (requestMaxLength != -1 && path.length > requestMaxLength) {\n    error = new Error('Request too long for google to handle (' + requestMaxLength + ' characters).');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    throw error;\n  }\n\n  var options = {\n    uri: (secure ? 'https' : 'http') + '://maps.googleapis.com' + path\n  };\n\n  if (encoding) options.encoding = encoding;\n  if (config.proxy) options.proxy = config.proxy;\n\n  if (typeof callback !== 'function') {\n    return options.uri;\n  }\n\n  request(options, function (error, res, data) {\n    if (error) {\n      return callback(error);\n    }\n    if (res.statusCode === 200) {\n      return callback(null, data);\n    }\n    error = new Error(data);\n    error.code = res.statusCode;\n\n    return callback(error, data);\n\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/assignParams.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Returns a type validated object.\n * It uses a key -> type hash to validate\n *\n */\n module.exports = function (params, newParams, acceptedKeys) {\n\n  if (!check.object(params)) {\n    params = {};\n  }\n\n  if (!check.object(newParams)) {\n    newParams = {};\n  }\n\n  if (!check.object(acceptedKeys)) {\n    throw new TypeError('acceptedKeys must be an object');\n  }\n\n  for (var key in acceptedKeys) {\n\n    if (newParams[ key ] != null) {\n\n      var expectedType = acceptedKeys[ key ];\n\n      if (expectedType == 'date') {\n\n        if (check.date(newParams[ key ])) {\n          params[ key ] = newParams[ key ];\n        }\n\n      } else if (expectedType == 'array') {\n\n        if (Array.isArray(newParams[ key ])) {\n          params[ key ] = newParams[ key ];\n        }\n\n      } else {\n\n        if (typeof newParams[ key ] === expectedType) {\n          params[ key ] = newParams[ key ];\n        }\n\n      }\n    }\n\n  }\n\n  return params;\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/jsonParser.js":"/**\n * Wraps the callback function to convert the output to a javascript object\n */\nmodule.exports = function(callback) {\n\n  if (typeof callback !== 'function') {\n    return false;\n  }\n\n  return function(err, jsonString) {\n\n    if (err) {\n      return callback(err);\n    }\n\n    var json;\n\n    try {\n      json = JSON.parse(jsonString);\n    } catch (e) {\n      return callback(e);\n    }\n\n    callback(err, json);\n\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/encodePolylines.js":"var _encodeNumber = require('./encodeNumber');\n\nfunction _encodeSignedNumber(num) {\n\n  var sgn_num = num << 1;\n\n  if (num < 0) {\n    sgn_num = ~(sgn_num);\n  }\n\n  return _encodeNumber(sgn_num);\n\n}\n\n\n/**\n * Algorithm pull from Google's definition of an encoded polyline\n *\n * Google documentation reference: https://developers.google.com/maps/documentation/utilities/polylinealgorithm\n */\nmodule.exports = function(points) {\n\n  // Dear maintainer:\n  //\n  // Once you are done trying to 'optimize' this routine,\n  // and have realized what a terrible mistake that was,\n  // please increment the following counter as a warning\n  // to the next guy:\n  //\n  // total_hours_wasted_here = 11\n  //\n  var i, dlat, dlng;\n  var plat = 0;\n  var plng = 0;\n  var encoded_points = [];\n\n  if (typeof points == 'string') {\n    points = points.split('|');\n  }\n\n  for (i = 0; i < points.length; i++) {\n    var point = points[i].split(',');\n    var lat = point[0];\n    var lng = point[1];\n    var late5 = Math.round(lat * 1e5);\n    var lnge5 = Math.round(lng * 1e5);\n    dlat = late5 - plat;\n    dlng = lnge5 - plng;\n    plat = late5;\n    plng = lnge5;\n    encoded_points.push( _encodeSignedNumber(dlat) + _encodeSignedNumber(dlng) );\n  }\n\n  return encoded_points.join('');\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/encodeNumber.js":"module.exports = function (num) {\n\n  var encodeString = '';\n\n  var nextValue, finalValue;\n\n  while (num >= 0x20) {\n    nextValue = (0x20 | (num & 0x1f)) + 63;\n    encodeString += (String.fromCharCode(nextValue));\n    num >>= 5;\n  }\n\n  finalValue = num + 63;\n\n  encodeString += (String.fromCharCode(finalValue));\n\n  return encodeString;\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/config/getDefault.js":"/**\n * Returns the default configuration object\n */\n module.exports = function() {\n\n  return {\n    encode_polylines: true,\n    google_client_id: null,\n    google_channel:   null,\n    key:              null,\n    proxy:            null,\n    secure:           false,\n    stagger_time:     200,\n    set google_private_key(value) {\n      if (typeof value !== 'undefined' && value !== null) {\n        // Google private keys are URL friendly base64, needs to be replaced with base64 valid characters\n        this._googlePrivateKey = value.replace(/-/g,'+').replace(/_/g,'/');\n        this._googlePrivateKey = new Buffer(this._googlePrivateKey, 'base64');\n      } else {\n        this._googlePrivateKey = null;\n      }\n    },\n    get google_private_key() {\n      return this._googlePrivateKey || null;\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/placeSearchText.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'place-search-text';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (this.config.key == null) {\n    return callback(new Error('The placeSearchText API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.query == null) {\n    return callback(new Error('params.query is required'));\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/placeSearchNearby.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar MAX_RADIUS = 50000;\n\nvar PLACES_RANKBY_DEFAULT = 'prominence';\nvar PLACES_RANKBY_DISTANCE = 'distance';\n\nvar METHOD_KEY = 'place-search-nearby';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (this.config.key == null) {\n    return callback(new Error('The placeSearchNearby API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.location == null) {\n    return callback(new Error('params.location is required'));\n  }\n\n  if (args.rankby !== PLACES_RANKBY_DEFAULT && args.rankby !== PLACES_RANKBY_DISTANCE) {\n    args.rankby = PLACES_RANKBY_DEFAULT;\n  }\n\n  /*\n    Note that radius must not be included if rankby=distance\n    Ranking results by distance will set a fixed search radius of 50km\n  */\n  if (args.rankby === PLACES_RANKBY_DISTANCE) {\n    if (args.keyword == null && args.name == null && args.types == null) {\n      return callback(new Error('If rankby=distance is specified, then one or more of keyword, name, or types is required.'));\n    }\n    delete args.radius;\n  } else if (args.rankby === PLACES_RANKBY_DEFAULT) {\n    if (args.radius == null) {\n      args.radius = MAX_RADIUS;\n    }\n  }\n\n  if (args.radius != null) {\n    args.radius = Math.min(parseInt(args.radius, 10), MAX_RADIUS);\n  }\n\n  if (args.minprice != null) {\n    args.minprice = parseInt(args.minprice, 10);\n    if (args.minprice < 0 || args.minprice > 4) {\n      args.minprice = 0;\n    }\n  }\n\n  if (args.maxprice != null) {\n    args.maxprice = parseInt(args.maxprice, 10);\n    if (args.maxprice < 0 || args.maxprice > 4) {\n      args.maxprice = 4;\n    }\n    if (args.minprice > args.maxprice) {\n      var swap = args.maxprice;\n      args.maxprice = ags.minprice;\n      args.minprice = swap;\n    }\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/placeDetails.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'place-details';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (this.config.key == null) {\n    return callback(new Error('The placeDetails API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.placeid == null) {\n    return callback(new Error('params.placeid is required'));\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/placeAutocomplete.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'place-autocomplete';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (this.config.key == null) {\n    return callback(new Error('The placeAutocomplete API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.input == null) {\n    return callback(new Error('params.input is required'));\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/geocode.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'geocode';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (!args.address && !args.components) {\n    return callback(new Error('params.address/params.components is required'));\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/reverseGeocode.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'reverse-geocode';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.latlng == null && args.place_id == null) {\n    return callback(new Error('params.latlng/params.place_id is required'));\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/distance.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\nvar _travelUtils  = require('./utils/travelUtils');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'distance-matrix';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (!(this.config.google_client_id && this.config.google_private_key) && this.config.key == null) {\n    return callback(new Error('The distance API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  // validate distance matrix args\n  if (args.origins == null) {\n    return callback(new Error('params.origins is required'));\n  }\n\n  if (args.destinations == null) {\n    return callback(new Error('params.destinations is required'));\n  }\n\n  // validate common directions/distance-matrix args\n  try {\n    _travelUtils.validateCommonArgs(args);\n  } catch(e) {\n    return callback(e);\n  }\n\n  _travelUtils.convertTargetTimes(args);\n  \n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/travelUtils.js":"var travelUtils = {}\n\n/**\n * Validates all arguments shared by directions and distance-matrix services\n *\n * Throws an error if validation fails.\n */\ntravelUtils.validateCommonArgs = function(args) {\n  if (args.mode != null) {\n    args.mode = args.mode.toLowerCase();\n    if (args.mode !== 'driving' && args.mode !== 'walking' && args.mode !== 'bicycling' && args.mode !== 'transit') {\n      throw new Error('Invalid transport mode: '+args.mode+'. Valid params.mode are [driving|walking|bicycling|transit]');\n    }\n    if (args.mode == 'transit') {\n      if (args.departure_time == null && args.arrival_time == null) {\n        throw new Error('When specifying params.mode = transit either params.departure_time or params.arrival_time must be provided');\n      }\n      if (args.waypoints != null) {\n        throw new Error('It is not possible to specify waypoints when params.mode = transit');\n      }\n    } \n  }\n\n  if (args.avoid != null) {\n    args.avoid = args.avoid.toLowerCase();\n    var argsArray = args.avoid.split('|');\n    for (var argIdx in argsArray) {\n      var argName = argsArray[argIdx];\n      if (argName !== 'tolls' && argName !== 'highways' && argName !== 'ferries') {\n        throw new Error('Invalid params.avoid: ' + argName + '. Valid params.avoid are [tolls|highways|ferries]');\n      }\n    }\n  }\n\n  if (args.units != null) {\n    args.units = args.units.toLowerCase();\n    if (args.units !== 'metric' && args.units !== 'imperial') {\n      throw new Error('Invalid params.units: '+args.units+'. Valid params.units are [metric|imperial]');\n    }\n  }\n\n  if (args.departure_time != null || args.arrival_time != null) {\n    if (args.mode && args.mode !== 'driving' && args.mode !== 'transit') {\n      throw new Error('params.departure_time or params.arrival_time can only be specified when params.mode = [driving|transit]');\n    }\n  }\n\n  if (args.traffic_model != null) {\n    if (args.mode && args.mode !== 'driving') {\n      throw new Error('params.traffic_model can only be specified when params.mode = [\"driving\"|null]');\n    }\n    if (args.departure_time == null || args.departure_time < (new Date()).getTime()) {\n      throw new Error('params.departure_time must be set and be after current time when params.traffic_model is set');\n    }\n    if (args.traffic_model !== 'best_guess' && args.traffic_model !== 'pessimistic' && args.traffic_model !== 'optimistic') {\n      throw new Error('Invalid params.traffic_model: '+args.traffic_model+'. Valid params.traffic_model are [best_guess|pessimistic|optimistic]');\n    }\n  }\n}\n\ntravelUtils.convertTargetTimes = function(args) {\n  // convert departure_time in UNIX timestamp\n  if (args.departure_time != null) {\n    args.departure_time = Math.floor( args.departure_time/1000 )\n  }\n\n  // convert arrival_time in UNIX timestamp\n  if (args.arrival_time != null) {\n    args.arrival_time = Math.floor( args.arrival_time/1000 )\n  }\n}\n\nmodule.exports = travelUtils;\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/directions.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\nvar _travelUtils  = require('./utils/travelUtils');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'directions';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (!(this.config.google_client_id && this.config.google_private_key) && this.config.key == null) {\n    return callback(new Error('The directions API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  // validate directions specific args\n  if (args.origin == null) {\n    return callback(new Error('params.origin is required'));\n  }\n\n  if (args.destination == null) {\n    return callback(new Error('params.destination is required'));\n  }\n\n  // validate common directions/distance-matrix args\n  try {\n    _travelUtils.validateCommonArgs(args);\n  } catch(e) {\n    return callback(e);\n  }\n\n  _travelUtils.convertTargetTimes(args);\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/elevationFromLocations.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest    = require('./utils/makeRequest');\nvar _assignParams   = require('./utils/assignParams');\nvar _jsonParser     = require('./utils/jsonParser');\nvar _encodePolyline = require('./utils/encodePolylines');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'elevation';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (!(this.config.google_client_id && this.config.google_private_key) && this.config.key == null) {\n    return callback(new Error('The elevation API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.locations == null) {\n    return callback(new Error('params.locations is required'));\n  }\n\n  if (this.config.encode_polylines === true) {\n    args.locations = 'enc:' + _encodePolyline(args.locations);\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/staticMap.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\nvar _parseMarkers = require('./utils/parseMarkers');\nvar _parseStyles  = require('./utils/parseStyles');\nvar _parsePaths   = require('./utils/parsePaths');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'static-map';\n\nfunction _errorHandler(callback, error) {\n  if (typeof callback === 'function') {\n    return callback(error);\n  }\n  throw error;\n}\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== \"undefined\" && callback !== null) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be present');\n    }\n  }\n\n  if (!(this.config.google_client_id && this.config.google_private_key) && this.config.key == null) {\n    return _errorHandler(callback, new Error('The staticMap API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return _errorHandler(callback, new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  // If a marker param or path param is provided then center and zoom param is not required\n  if (args.markers == null && args.path == null) {\n    if (args.center == null) {\n      return _errorHandler(callback, new Error('params.center is required'));\n    }\n    if (args.zoom == null) {\n      return _errorHandler(callback, new Error('params.zoom is required'));\n    }\n  }\n\n  if (args.markers != null) {\n    try {\n      args.markers = _parseMarkers(args.markers);\n    } catch (ex) {\n      return _errorHandler(callback, ex);\n    }\n  }\n\n  if (args.zoom != null) {\n    if (args.zoom < 0 || args.zoom > 21) {\n      return _errorHandler(callback, new Error('params.zoom must be between 0 and 21'));\n    }\n  }\n\n  if (args.size == null || !/^\\d+x\\d+$/.test(args.size)) {\n    return _errorHandler(callback, new Error('params.size must be specified in the form {horizontal_value}x{vertical_value}'));\n  }\n\n  if (args.scale != null) {\n    var scale = args.scale;\n    if (scale !== 1 && scale !== 2 && scale !== 4) {\n      return _errorHandler(callback, new Error('params.scale must be 1, 2, 4'));\n    }\n    if (scale === 4 && !(this.config.google_client_id && this.config.google_private_key)) {\n      return _errorHandler(callback, new Error('params.scale can be 4 only for GoogleMaps for work users'));\n    }\n  }\n\n  if (args.format != null) {\n    if (args.format != 'png8' && args.format != 'png' && args.format != 'png32' && args.format != 'gif' && args.format != 'jpg' && args.format != 'jpg-baseline') {\n      return _errorHandler(callback, new Error('Invalid params.format: '+args.format+'. Valid params.format are [png8|png|png32|gif|jpg|jpg-baseline]'));\n    }\n  }\n\n  if (args.maptype != null) {\n    args.maptype = args.maptype.toLowerCase();\n    if (args.maptype !== 'roadmap' && args.maptype !== 'satellite' && args.maptype !== 'terrain' && args.maptype !== 'hybrid') {\n      return _errorHandler(callback, new Error('Invalid params.maptype: '+args.maptype+'. Valid params.maptype are [roadmap|satellite|terrain|hybrid]'));\n    }\n  }\n\n  if (args.style != null) {\n    try {\n      args.style = _parseStyles(args.style);\n    } catch (ex) {\n      return _errorHandler(callback, ex);\n    }\n  }\n\n  if (args.path != null) {\n    try {\n      args.path = _parsePaths(args.path, this.config.encode_polylines);\n    } catch (ex) {\n      return _errorHandler(callback, ex);\n    }\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, callback, MAX_REQUEST_LENGTHS[METHOD_KEY], 'binary');\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/parseMarkers.js":"/**\n  Transfors an array of markers into a pipe separeted style location array of string\n**/\nmodule.exports = function(markers) {\n\n  if (!Array.isArray(markers)) {\n    throw new Error('markers must be an array');\n  }\n\n  return markers.map(function(marker) {\n\n    var i, len, m = [], keys = ['size', 'color', 'label', 'icon', 'shadow', 'scale'];\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      if (marker[keys[i]] != null) {\n        m.push(keys[i] + ':' + marker[keys[i]]);\n      }\n    }\n\n    if (marker.location == null) {\n      throw new Error('Each marker must have a location');\n    } else {\n      m.push(marker['location']);\n    }\n\n    return m.join('|');\n\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/parseStyles.js":"/**\nTransforms an array of style objects into an array of pipe separated strings\n\ninput = [\n  {\n    'feature': 'road',\n    'element': 'all',\n    'rules': {\n      'hue': '0x00ff00'\n    }\n  },\n  {\n    'feature': 'landscape',\n    'element': 'all',\n    'rules': {\n      'visibility': 'off'\n    }\n  }\n]\n\noutput = [\n  \"feature:road|element:all|hue:0x00ff00\",\n  \"feature:landscape|element:all|visibility:off\"\n]\n**/\n\nmodule.exports = function(styles) {\n\n  if (!Array.isArray(styles)) {\n    throw new Error('styles must be an array');\n  }\n\n  return styles.map(function(style){\n\n    var i, len, s = [], keys = ['feature', 'element'];\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      if (style[keys[i]] != null) {\n        s.push(keys[i] + ':' + style[keys[i]]);\n      }\n    }\n\n    if (style.rules != null) {\n      var k;\n      for (k in style.rules) {\n        s.push(k + ':' + style.rules[k]);\n      }\n    }\n\n    return s.join('|');\n\n  });\n\n}\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/utils/parsePaths.js":"var _encodePolyline = require('./encodePolylines');\n\n/**\nTransfors an array of paths into a pipe separeted string\n\ninput = [\n  {\n    points: [\n      '40.737102,-73.990318',\n      '40.749825,-73.987963',\n      '40.752946,-73.987384',\n      '40.755823,-73.986397'\n    ],\n    color: '0x0000ff',\n    weight: 5\n  }\n]\n\noutput = color:0x0000ff|weight:5|40.737102,-73.990318|40.749825,-73.987963|40.752946,-73.987384|40.755823,-73.986397\n**/\nmodule.exports = function(paths, encodePolylines) {\n\n  if (!Array.isArray(paths)) {\n    throw new Error('paths must be an array');\n  }\n\n  return paths.map(function(path) {\n\n    var i, len, p = [], keys = ['weight', 'color', 'fillcolor', 'geodisc'];\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      if (path[keys[i]] != null) {\n        p.push(keys[i] + ':' + path[keys[i]]);\n      }\n    }\n\n    if (!Array.isArray(path.points)) {\n      throw new Error('Each path must have an array of points');\n    } else {\n      if (encodePolylines === true) {\n        p.push( 'enc:' + _encodePolyline(path['points']));\n      } else {\n        path['points'].map(function(point) {\n          p.push(point);\n        });\n      }\n    }\n\n    return p.join('|');\n\n  }).join('|');\n\n}\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/streetView.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'street-view';\n\nfunction _errorHandler(callback, error) {\n  if (typeof callback === 'function') {\n    return callback(error);\n  }\n  throw error;\n}\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== \"undefined\" && callback !== null) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be present');\n    }\n  }\n\n  if (!(this.config.google_client_id && this.config.google_private_key) && this.config.key == null) {\n    return _errorHandler(callback, new Error('The streetView API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return _errorHandler(callback, new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.location == null && args.pano == null) {\n    return _errorHandler(callback, new Error('params.location or params.pano is required'));\n  }\n\n  if (args.size == null || !/^\\d+x\\d+$/.test(args.size)) {\n    return _errorHandler(callback, new Error('params.size must be specified in the form {horizontal_value}x{vertical_value}'));\n  }\n\n  if (args.heading != null) {\n    args.heading = parseInt(args.heading, 10);\n    if (args.heading < 0 || args.heading > 360) {\n      return _errorHandler(callback, new Error('params.heading must be between 0 and 360'));\n    }\n  }\n\n  if (args.fov != null) {\n    args.fov = parseInt(args.fov, 10);\n    if (args.fov < 0 || args.fov > 120) {\n      return _errorHandler(callback, new Error('params.fov must be between 0 and 120'));\n    }\n  }\n\n  if (args.pitch != null) {\n    args.pitch = parseInt(args.pitch, 10);\n    if (args.pitch < -90 || args.pitch > 90) {\n      return _errorHandler(callback, new Error('params.pitch must be between -90 and 90'));\n    }\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, callback, MAX_REQUEST_LENGTHS[METHOD_KEY], 'binary');\n\n};\n","/home/travis/build/npmtest/node-npmtest-googlemaps/node_modules/googlemaps/lib/timezone.js":"/**\n * Modules from the community: package.json\n */\nvar check = require('check-types');\n\n/**\n * Internal modules\n */\nvar _makeRequest  = require('./utils/makeRequest');\nvar _assignParams = require('./utils/assignParams');\nvar _jsonParser   = require('./utils/jsonParser');\n\nvar _constants = require('./config/constants');\n\nvar ACCEPTED_PARAMS      = _constants.ACCEPTED_PARAMS;\nvar GOOGLEMAPS_ENDPOINTS = _constants.GOOGLEMAPS_ENDPOINTS;\nvar MAX_REQUEST_LENGTHS  = _constants.MAX_REQUEST_LENGTHS;\n\nvar METHOD_KEY = 'timezone';\n\nmodule.exports = function(params, callback) {\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback must be present');\n  }\n\n  if (!(this.config.google_client_id && this.config.google_private_key) && this.config.key == null) {\n    return callback(new Error('The timezone API requires a key. You can add it to the config.'));\n  }\n\n  if (!check.object(params)) {\n    return callback(new TypeError('params must be an object'));\n  }\n\n  var args = _assignParams({}, params, ACCEPTED_PARAMS[METHOD_KEY]);\n\n  if (args.location == null) {\n    return callback(new Error('params.location is required'));\n  }\n  if (args.timestamp == null) {\n    return callback(new Error('params.timestamp is required'));\n  }\n\n  return _makeRequest(this.request, this.config, GOOGLEMAPS_ENDPOINTS[METHOD_KEY], args, _jsonParser(callback), MAX_REQUEST_LENGTHS[METHOD_KEY]);\n\n};\n"}